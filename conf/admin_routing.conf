server {
        listen 45678;
        server_name  localhost;
        
        location / {
            dyups_interface;
        }
        
        location = /redis {
            internal;
            set_unescape_uri $key $arg_key;
            redis2_query get $key;
            redis2_pass static_redis_upstream;
        }
 
        location = /redis_keys {
            internal;
            set_unescape_uri $key $arg_key;
            redis2_raw_query 'keys $key\r\n';
            redis2_pass static_redis_upstream;
        }
        
        location /ngxshared/refresh {
            default_type 'text/html';
            content_by_lua_file routing/lua/ngxshared_refresh.lua;
        }
        
        location /ngxshared/refresh_all {
            default_type 'text/html';
            content_by_lua_file routing/lua/ngxshared_refresh_all.lua;
        }
        
        location /ngxshared/list {
            default_type 'text/html';
            content_by_lua '
                local arr = "{"
                local keys = ngx.shared._upstreams:get_keys();
                for i, key in ipairs(keys) do
                    local value = ngx.shared._upstreams:get(key);
                    --ngx.say(key, " : " ,value, "<br/>")
                    if i == 1 then
                        arr = arr..[["]]..key..[[":"]]..value..[["]]
                    else
                        arr = arr..[[,"]]..key..[[":"]]..value..[["]]
                    end
                end
                arr = arr.."}"
                ngx.say(arr)
            ';
        }
        
        location /ngxshared/delete {
            default_type 'text/html';
            content_by_lua '
                local arg_key = ngx.var.arg_key
                if arg_key ~= nil then 
                        local value = ngx.shared._upstreams:get(arg_key);
                        if value ~= nil then 
                            ngx.shared._upstreams:delete(arg_key);
                            ngx.say("delete "..arg_key)
                        else
                            ngx.say("exist not key: "..arg_key)
                        end
                else
                        ngx.say("arg key is nil")
                end
            ';
        }
        
        location /ngxshared/delete_all {
            default_type 'text/html';
            content_by_lua '
                local keys = ngx.shared._upstreams:get_keys();
                for i, key in ipairs(keys) do
                    ngx.shared._upstreams:delete(key);
                    ngx.say("delete-- ", key, " : " ,value ,"<br/>")
                end
            ';
        }
        
        location /ngxshared/flush_all {
            default_type 'text/html';
            content_by_lua '
                ngx.shared._upstreams:flush_all();
                ngx.shared._upstreams:flush_expired();
            ';
        }
        
        location /ngxshared/flush_expired {
            default_type 'text/html';
            content_by_lua '
                ngx.shared._upstreams:flush_expired();
            ';
        }
    }